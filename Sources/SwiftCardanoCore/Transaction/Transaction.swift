import Foundation
import PotentCBOR

public struct Transaction: CBORSerializable, PayloadJSONSerializable, Equatable, Hashable {

    public static var TYPE: String { "Unwitnessed Tx ConwayEra" }
    public static var DESCRIPTION: String { "Generated by SwiftCardanoCore" }

    public var _payload: Data
    public var _type: String
    public var _description: String

    public var transactionBody: TransactionBody
    public var transactionWitnessSet: TransactionWitnessSet
    public var valid: Bool = true
    public var auxiliaryData: AuxiliaryData? = nil

    public var id: TransactionId? {
        return transactionBody.id
    }
    
    public init(
        transactionBody: TransactionBody,
        transactionWitnessSet: TransactionWitnessSet,
        valid: Bool = true,
        auxiliaryData: AuxiliaryData? = nil
    ) {
        self.transactionBody = transactionBody
        self.transactionWitnessSet = transactionWitnessSet
        self.valid = valid
        self.auxiliaryData = auxiliaryData
        
        self._payload =  try! CBORSerialization.data(from:
                .array(
                    [
                        try! CBOREncoder().encode(transactionBody).toCBOR,
                        try! CBOREncoder().encode(transactionWitnessSet).toCBOR,
                        try! CBOREncoder().encode(valid).toCBOR,
                        try! CBOREncoder().encode(auxiliaryData).toCBOR,
                    ]
                )
        )
        self._type = transactionWitnessSet
            .isEmpty() ? Self.TYPE : Self.TYPE
            .replacingOccurrences(of: "Unwitnessed", with: "Witnessed")
        self._description = Self.DESCRIPTION
    }
    
    public init(payload: Data, type: String?, description: String?) {
        self._payload = payload
        self._description = description ?? Self.DESCRIPTION
        
        let cbor = try! CBORDecoder().decode(Transaction.self, from: payload)
        
        self.transactionBody = cbor.transactionBody
        self.transactionWitnessSet = cbor.transactionWitnessSet
        self.valid = cbor.valid
        self.auxiliaryData = cbor.auxiliaryData
        
        self._type = self.transactionWitnessSet
            .isEmpty() ? Self.TYPE : Self.TYPE
            .replacingOccurrences(of: "Unwitnessed", with: "Witnessed")
    }
    
    public init(from decoder: Decoder) throws {
        var container = try decoder.unkeyedContainer()
        
        let transactionBody = try container.decode(TransactionBody.self)
        let transactionWitnessSet = try container.decode(TransactionWitnessSet.self)
        let valid = try container.decode(Bool.self)
        let auxiliaryData = try container.decodeIfPresent(AuxiliaryData.self)
        
        self.init(
            transactionBody: transactionBody,
            transactionWitnessSet: transactionWitnessSet,
            valid: valid,
            auxiliaryData: auxiliaryData
        )
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.unkeyedContainer()
        try container.encode(transactionBody)
        try container.encode(transactionWitnessSet)
        try container.encode(valid)
        try container.encode(auxiliaryData)
    }
    
    /// Serialize to JSON.
    ///
    /// The json output has three fields: "type", "description", and "cborHex".
    /// - Returns: JSON representation
    func toJSON() throws -> String? {
        let jsonString = """
        {
            "type": "\(type)",
            "description": "\(description)",
            "cborHex": "\(payload.toHex)"
        }
        """
        return jsonString
    }
}
